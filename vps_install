#!/usr/bin/env bash

# cd to a directory; exit if cd failed
cd_or_exit() {
	if [ ! -d "$1" ]; then
		printf "Could not cd into directory: %s\n" "$1"
		exit 1
	else
		cd "$1"
	fi
}

# require that a executable be installed
require() {
	if [[ ! $(command -v "$1") ]]; then
		printf "requires %s, Install that and re-run\n" "$1"
		exit 1
	fi
}

# clone $1 (URL) if $2 (directory) doesnt exist
clone_if_not_exists() {
	if [ ! -d "$2" ]; then
		git clone "$1" "$2"
	fi
}

# mkdir if first arg doesnt exist
mkdir_if_not_exists() {
	if [ ! -d "$1" ]; then
		mkdir -p "$1"
	fi
}

# make sure a file exists or exit
expect_file() {
	if [ ! -f "$1" ]; then
		printf "Fatal error: Expected file at %s\n" "$1"
		exit 1
	fi
}

require python3.7
require ruby
require bundle
require docker
require docker-compose
require pipenv
require realpath
require supervisord
require jq
require elixir # sudo apt install erlang-inets erlang-dev elixir erlang-parsetools
require cargo
require rsync
require zcat
require goaccess
require htpasswd
require uglifycss
require psql # remind me to setup postgres for glue

CUR_DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
source "${CUR_DIR}/directories"

expect_file "${CUR_DIR}/secret"

mkdir_if_not_exists "$CODE"
mkdir_if_not_exists "$MID_CACHE"
mkdir_if_not_exists "$HOME/f"
mkdir_if_not_exists "$HOME/.credentials"

cd_or_exit "${CODE}"

clone_if_not_exists "git@github.com:seanbreckenridge/mal-id-cache.git" "$MID_CACHE_REPO"
clone_if_not_exists "git@github.com:seanbreckenridge/mal-notify-bot.git" "$NOTIFY_BOT"
clone_if_not_exists "git@github.com:seanbreckenridge/discord-countdown-bot.git" "$COUNTDOWN_BOT"
clone_if_not_exists "git@github.com:seanbreckenridge/mal-unapproved.git" "$UNAP_SERVER"
clone_if_not_exists "git@github.com:seanbreckenridge/docker-jikan.git" "$DOCKER_JIKAN"
clone_if_not_exists "https://github.com/seanbreckenridge/mal-id-cache" "$NOTIFY_BOT/mal-id-cache"
clone_if_not_exists "git@github.com:seanbreckenridge/wca_userinfo.git" "$WCA_USERINFO"
clone_if_not_exists "git@github.com:seanbreckenridge/albums.git" "$ALBUMS"
clone_if_not_exists "git@github.com:seanbreckenridge/glue.git" "$GLUE"

expect_file "$NOTIFY_BOT/token.yaml"
expect_file "$NOTIFY_BOT/old"
expect_file "$COUNTDOWN_BOT/token.yaml"
expect_file "${HOME}/.credentials/sheets.googleapis.com-python-nextalbums.json"
expect_file "${HOME}/.discord_web_hook.txt"

# create log directories if they dont exist
mkdir_if_not_exists "$MID_LOGS"
mkdir_if_not_exists "$NOTIFY_LOGS"
mkdir_if_not_exists "$COUNTDOWN_LOGS"
mkdir_if_not_exists "$UNAP_LOGS"
mkdir_if_not_exists "$DOCKER_LOGS"
mkdir_if_not_exists "$WCA_LOGS"
mkdir_if_not_exists "$ALBUMS_LOGS"
mkdir_if_not_exists "$GLUE_LOGS"
mkdir_if_not_exists "$SUPERVISOR_LOGS"

# https://www.digitalocean.com/community/tutorials/how-to-set-up-basic-http-authentication-with-nginx-on-ubuntu-14-04
# password protect goaccess html log files
if [ ! -e /etc/nginx/.htpasswd ]; then
	sudo htpasswd -c /etc/nginx/.htpasswd sean
	mkdir -p ~/.goaccess_html
fi

# elixir
mix local.hex --force
mix local.rebar --force

# install glue assets
npm install --prefix "$GLUE/apps/glue/assets"

# setup albums server
cd_or_exit "$ALBUMS/server"
pipenv --python "$(command -v python3.7)"
pipenv install

# setup wca userinfo
if [ ! -e "${WCA_USERINFO}/target/release/wca_userinfo" ]; then
	cd_or_exit "$WCA_USERINFO"
	cargo build --bins --release
	rm -rf "${WCA_USERINFO}/target/release/deps"
	rm -rf "${WCA_USERINFO}/target/release/build"
fi

# setup mal id cache
cd_or_exit "$MID_CACHE_REPO"
pipenv --python "$(command -v python3.7)"
pipenv install -r "$MID_CACHE_REPO/requirements.txt"
pipenv run python3 setup.py install
pipenv run mal_id_cache --init-dir
#pipenv run mal_id_cache --force-state 0

# setup notify bot
cd_or_exit "$NOTIFY_BOT"
pipenv --python "$(command -v python3.7)"
pipenv install

# setup countdown bot
cd_or_exit "$COUNTDOWN_BOT"
pipenv --python "$(command -v python3.7)"
pipenv install

# setup unapproved server
cd_or_exit "$UNAP_SERVER"
bundle install
python3 -m pip install --user --upgrade pip
python3 -m pip install --user jikanpy requests

# install superhooks-discord
python3 -m pip install --user git+https://github.com/seanbreckenridge/superhooks

cd "$DOCKER_JIKAN" && docker-compose up -d # start jikan
"$UNAP_SERVER"/cache_loop.sh once          # initial call to build cache
"$UNAP_SERVER"/uglify_css.sh

# nginx logs
groups | grep -q "adm" || sudo usermod -a -G adm $(whoami)
