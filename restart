#!/usr/bin/env bash
# Starts all the background processes using screen; kills any previous screen instances

echo "\"screen -r 'name'\" to attach to screen"
echo "<ctrl>a</ctrl>d to detach"
echo "<ctrl>a</ctrl>K to kill"

screen -wipe

# kill all previous screens
pkill screen  # SIGTERM, to allow async operations to finish

CUR_DIR="$(dirname "${BASH_SOURCE[0]}")"
source "${CUR_DIR}/directories"

# restart/build docker
cd "$DOCKER_JIKAN" && ./run.sh

# VirtualEnvs created with pipenv
# Have to match pipenv created directories like repo-name-J$3sJF/bin/python
# for virtualenvironments

# start mal-notify-bot
# logs in python to $NOTIFY_BOT/logs/bot.log
screen -dm -L -Logfile "${NOTIFY_BOT}/screen.log" -S "notify-bot" "${VENVS}"/mal-notify-bot*/bin/python "${NOTIFY_BOT}"/bot.py

# start countdown-bot
screen -dm -L -Logfile "${COUNTDOWN_BOT}"/bot.log -S "countdown-bot" "${VENVS}"/discord-countdown-bot*/bin/python "${COUNTDOWN_BOT}"/bot.py

# start mal-id-cache
# logs in python process to $MID_CACHE/logs/cache.log
cd "${MID_CACHE}"/repo && screen -dm -S "id-cache" pipenv run mal_id_cache --loop --commit

# start unapproved cache json loop
screen -dm -L -Logfile "${UNAP_SERVER}/cache_loop.log" -S "unap-loop" "${UNAP_SERVER}/cache_loop.sh"

killall ruby
while [[ $(lsof -i:5252) ]]; do
	echo "Waiting for sinatra to end.."
	sleep 1
done

# start unapproved http server
screen -dm -L -Logfile "${UNAP_SERVER}/server.log" -S "unap-http" ruby "${UNAP_SERVER}/server.rb"
